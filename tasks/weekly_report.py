# tasks/weekly_report.py

import asyncio
import logging

from aiogram import Bot, types
from utils.config import settings
from handlers.statistics import (
    fetch_stats_data_from_db,
    fetch_tag_trends_data,
    fetch_top_n_tags,
)
from charts.chart_utils import generate_pie_chart, generate_line_chart

logger = logging.getLogger(__name__)


async def send_weekly_statistics_report(bot: Bot, admin_id: int, period_days: int = 7):
    logger.info(f"–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è admin_id: {admin_id} –∑–∞ {period_days} –¥–Ω–µ–π.")

    report_parts = [f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π):\n"]
    photos_to_send = []

    try:
        stats_data_pie = await fetch_stats_data_from_db(period_days)
        positive_data_pie = stats_data_pie.get("positive")
        negative_data_pie = stats_data_pie.get("negative")

        if positive_data_pie:
            title = f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–∏—Ä–æ–≥, {period_days}–¥)"
            buffer = generate_pie_chart(positive_data_pie, title)
            if buffer:
                photos_to_send.append((types.InputFile(buffer, filename=f"weekly_positive_pie.png"), title))
        else:
            report_parts.append("‚ñ´Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Ä–æ–≥–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

        if negative_data_pie:
            title = f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–∏—Ä–æ–≥, {period_days}–¥)"
            buffer = generate_pie_chart(negative_data_pie, title)
            if buffer:
                photos_to_send.append((types.InputFile(buffer, filename=f"weekly_negative_pie.png"), title))
        else:
            report_parts.append("‚ñ´Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Ä–æ–≥–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

        tag_trends_data = await fetch_tag_trends_data(period_days)
        if tag_trends_data:
            title = f"–î–∏–Ω–∞–º–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–µ–≥–æ–≤ (—Ç—Ä–µ–Ω–¥—ã, {period_days}–¥)"
            buffer = generate_line_chart(tag_trends_data, title)
            if buffer:
                photos_to_send.append((types.InputFile(buffer, filename=f"weekly_tag_trends.png"), title))
            else:
                report_parts.append("‚ñ´Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è).")
        else:
            report_parts.append("‚ñ´Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤.")

        top_n_tags_data = await fetch_top_n_tags(period_days, top_n=5)
        top_tags_text_parts = []
        if top_n_tags_data.get("positive"):
            positive_top_list = "\n".join([f"  - {tag} ({count})" for tag, count in top_n_tags_data["positive"]])
            top_tags_text_parts.append(
                f"üëç –¢–æ–ø-{len(top_n_tags_data['positive'])} –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤:\n{positive_top_list}")

        if top_n_tags_data.get("negative"):
            negative_top_list = "\n".join([f"  - {tag} ({count})" for tag, count in top_n_tags_data["negative"]])
            top_tags_text_parts.append(
                f"üëé –¢–æ–ø-{len(top_n_tags_data['negative'])} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤:\n{negative_top_list}")

        if top_tags_text_parts:
            report_parts.append("\n" + "\n\n".join(top_tags_text_parts))
        else:
            report_parts.append("‚ñ´Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø-N —Ç–µ–≥–∞–º.")

        if len(report_parts) > 1 or not photos_to_send:
            await bot.send_message(admin_id, "\n".join(report_parts))
        elif len(report_parts) == 1 and photos_to_send:
            await bot.send_message(admin_id, report_parts[0])

        for photo_file, caption_text in photos_to_send:
            try:
                await bot.send_photo(admin_id, photo_file, caption=caption_text)
            except Exception as e_photo:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ admin_id {admin_id}: {e_photo}")
                await bot.send_message(admin_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {caption_text}")
            await asyncio.sleep(0.3)

        logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω admin_id: {admin_id}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è admin_id {admin_id}:")
        try:
            await bot.send_message(admin_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        except Exception as e_send_err:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ admin_id {admin_id}: {e_send_err}")


async def trigger_weekly_report(bot: Bot):
    logger.info("[TASK] Weekly report task STARTED")
    for admin_id in settings.ADMIN_IDS:
        await send_weekly_statistics_report(bot, admin_id, period_days=7)
        await asyncio.sleep(1)
