# handlers.py
import json, asyncio, os, csv, io
from datetime import datetime, timedelta
from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from datetime import datetime, timedelta
from .db import get_connection
from .ai import keyword_tagger, ai_tagger, ai_sentiment
from .config import settings
from typing import List, Optional

ADMIN_IDS = settings.ADMIN_IDS

AI_LABELS = ["bug", "feature", "idea", "praise", "question", "urgent"]

# –º–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π ‚Üí –∞–Ω–≥–ª.
RUS2ENG = {
    "–±–∞–≥": "bug",        "–æ—à–∏–±–∫–∞": "bug",
    "—Ñ–∏—á–∞": "feature",   "—Ñ—É–Ω–∫—Ü–∏—è": "feature",
    "–∏–¥–µ—è": "idea",      "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "idea",
    "–ø–æ—Ö–≤–∞–ª–∞": "praise", "—Å–ø–∞—Å–∏–±–æ": "praise",
    "–≤–æ–ø—Ä–æ—Å": "question","–∫–∞–∫": "question",
    "—Å—Ä–æ—á–Ω–æ": "urgent",  "–≤–∞–∂–Ω–æ": "urgent",
}

def normalize_tags(raw: Optional[str]) -> List[str]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É 'bug,—Ñ–∏—á–∞,–ø–æ—Ö–≤–∞–ª–∞' –≤ ['bug','feature','praise'].
    –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–µ –∞–ª–∏–∞—Å—ã –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∞–Ω–≥–ª. —Ç–µ–≥–∏.
    """
    if not raw:
        return []
    seen = set()
    out = []
    for part in raw.split(","):
        t = part.strip().lower()
        if not t or t in seen:
            continue
        seen.add(t)
        if t in AI_LABELS:
            out.append(t)
        elif t in RUS2ENG:
            out.append(RUS2ENG[t])
        else:
            out.append(t)
    return out

def register(dp: Dispatcher):
    dp.message_handler(commands=["start"])(cmd_start)
    dp.message_handler(commands=["help"])(cmd_help)
    dp.message_handler(commands=["list"])(cmd_list)
    dp.message_handler(commands=["export"])(cmd_export)
    dp.callback_query_handler(lambda c: c.data and c.data.startswith("mark:"))(process_mark)
    
    @dp.message_handler(content_types=types.ContentType.ANY)
    async def collect(message: types.Message):
        await save_to_db(message)
        kw_tags = await keyword_tagger(message.text or "")
        await save_tags(message, kw_tags, False)
        asyncio.create_task(process_with_ai(message))

async def save_to_db(m: types.Message):
    con = get_connection(); cur = con.cursor()
    cur.execute("""
        INSERT INTO messages
          (id,chat_id,user_id,username,msg_date,text,raw_json, tagged, ai_tagged)
        VALUES (?,?,?,?,?,?,?, 0, 0)
    """,
    (
        m.message_id, 
        m.chat.id,
        m.from_user.id if m.from_user else None,
        m.from_user.username if m.from_user else None,
        datetime.utcfromtimestamp(m.date.timestamp()),
        m.text or "", 
        json.dumps(m.to_python())
    ))
    con.commit()
    con.close()

async def process_with_ai(message: types.Message):
    text = message.text or ""
    sentiment = await ai_sentiment(text)
    con = get_connection(); cur = con.cursor()
    cur.execute(
        "UPDATE messages SET sentiment=?, ai_tagged=1 WHERE id=? AND chat_id=?",
        (sentiment, message.message_id, message.chat.id)
    )
    con.commit()
    con.close()
    ai_tags = await ai_tagger(message.text or "")
    await save_tags(message, ai_tags, True)

async def save_tags(message: types.Message,
                    tags: list[str],
                    ai: bool):
    """
    message ‚Äî –æ–±—ä–µ–∫—Ç Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è
    tags    ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    ai      ‚Äî True, –µ—Å–ª–∏ —Ç–µ–≥–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç AI, False ‚Äî –æ—Ç keyword_tagger
    """
    if not tags:
        return

    con = get_connection()
    cur = con.cursor()

    for tag in tags:
        cur.execute(
            "UPDATE OR INSERT INTO tags(name) VALUES(?) MATCHING(name)",
            (tag,)
        )
        cur.execute("SELECT id FROM tags WHERE name=?", (tag,))
        tag_id = cur.fetchone()[0]

        cur.execute("""
            SELECT 1 FROM message_tags
             WHERE message_id=? AND chat_id=? AND tag_id=?
        """, (message.message_id, message.chat.id, tag_id))
        if cur.fetchone() is None:
            cur.execute("""
                INSERT INTO message_tags
                  (message_id, chat_id, tag_id, processed)
                VALUES (?, ?, ?, 0)
            """, (message.message_id, message.chat.id, tag_id))

        action = "ai_added" if ai else "kw_added"
        cur.execute("""
            INSERT INTO tag_actions
              (message_id, chat_id, tag_id, action, action_by)
            VALUES (?, ?, ?, ?, ?)
        """, (
            message.message_id,
            message.chat.id,
            tag_id,
            action,
            message.from_user.username or "unknown"
        ))

        if ai:
            for admin in ADMIN_IDS:
                await notify_admin(message, tag, admin)

    cur.execute("""
        UPDATE messages
           SET tagged=1
         WHERE id=? AND chat_id=?
    """, (message.message_id, message.chat.id))

    con.commit()
    con.close()

async def notify_admin(message: types.Message, tag: str, admin_id: int):
    link = make_msg_link(message.chat.id, message.message_id)
    text = (f"üîî –ù–∞–π–¥–µ–Ω —Ç–µ–≥ *{tag}* –≤ —á–∞—Ç–µ `{message.chat.title}`\n"
            f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({link})")
    bot = message.bot
    await bot.send_message(admin_id, text,
                           parse_mode="Markdown",
                           reply_markup=mk_kb(message.chat.id, message.message_id, tag))

def make_msg_link(chat_id: int, msg_id: int) -> str:
    # –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø: —É–±–∏—Ä–∞–µ–º "-100"
    cid = str(chat_id).replace("-100", "")
    return f"https://t.me/c/{cid}/{msg_id}"

def mk_kb(chat_id: int, msg_id: int, tag: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", callback_data=f"mark:1:{chat_id}:{msg_id}:{tag}"),
            InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å",   callback_data=f"mark:0:{chat_id}:{msg_id}:{tag}")
        ]
    ])
    return kb

async def process_mark(call: CallbackQuery):
    _, flag, chat_id, msg_id, tag = call.data.split(":")
    flag, chat_id, msg_id = int(flag), int(chat_id), int(msg_id)

    # 1) –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ –ë–î
    con = get_connection(); cur = con.cursor()
    cur.execute(
        """
        UPDATE message_tags
           SET processed=?
         WHERE message_id=? AND chat_id=? AND tag_id=(
           SELECT id FROM tags WHERE name=?
         )
        """,
        (flag, msg_id, chat_id, tag)
    )
    con.commit()
    con.close()

    # 2) –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    # –≤–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Ä–∞–∑–º–µ—Ç–∫—É
    # await call.message.edit_reply_markup(reply_markup=None)
    # –≤–∞—Ä–∏–∞–Ω—Ç 2: –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ:
    await call.message.delete()

    # 3) –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.answer("–ì–æ—Ç–æ–≤–æ! ‚úÖ", show_alert=False)

# === –ö–æ–º–∞–Ω–¥–∞ /list ===
"""
/list all|id_chat last_day|week|month [tag] [processed|unprocessed]
"""
async def cmd_list(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/list [chat_id|all] last_day|last_week|last_month [tag1,tag2,...] [processed|unprocessed]\n\n"
            "‚Äì –í –≥—Ä—É–ø–ø–µ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å chat_id.\n"
            "‚Äì –í –õ–° —É–∫–∞–∂–∏—Ç–µ –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π chat_id, –ª–∏–±–æ all."
        )

    # 1) –†–∞–∑–±–∏—Ä–∞–µ–º chat scope
    first = parts[1].lower()
    if first == "all":
        target_chat = None
        args = parts[2:]
    else:
        try:
            target_chat = int(first)
            args = parts[2:]
        except ValueError:
            if message.chat.type != "private":
                target_chat = message.chat.id
                args = parts[1:]
            else:
                return await message.reply("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id –∏–ª–∏ all –≤ –õ–°.")

    # 2) –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ –¥–∞—Ç–µ
    if not args:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω: last_day|last_week|last_month")
    rng = args[0]
    now = datetime.utcnow()
    since = {
        "last_day":   now - timedelta(days=1),
        "last_week":  now - timedelta(weeks=1),
        "last_month": now - timedelta(days=30),
    }.get(rng)
    if not since:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: last_day, last_week, last_month")

    # 3) –¢–µ–≥–∏ –∏ processed-—Ñ–∏–ª—å—Ç—Ä
    raw_tags = args[1] if len(args) >= 2 else None
    tags = normalize_tags(raw_tags)
    proc = None
    if len(args) >= 3:
        proc = 1 if args[2].lower().startswith("proc") else 0

    # 4) –°–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SQL
    sql = """
      SELECT m.id, m.msg_date, t.name, m.sentiment, mt.processed
      FROM messages m
      JOIN message_tags mt ON m.id=mt.message_id AND m.chat_id=mt.chat_id
      JOIN tags t        ON t.id=mt.tag_id
     WHERE m.msg_date>=?
    """
    params = [since]

    if target_chat is not None:
        sql += " AND m.chat_id=?"; params.append(target_chat)
    if tags:
        ph = ",".join("?" for _ in tags)
        sql += f" AND t.name IN ({ph})"; params.extend(tags)
    if proc is not None:
        sql += " AND mt.processed=?"; params.append(proc)

    sql += " ORDER BY m.msg_date DESC"

    # 5) –í—ã–ø–æ–ª–Ω—è–µ–º
    con = get_connection(); cur = con.cursor()
    cur.execute(sql, params)
    rows = cur.fetchall()
    con.close()

    if not rows:
        return await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

    # 6) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    for mid, date, tname, sent, processed in rows:
        status = "‚úÖ" if processed else "‚ùå"
        link = make_msg_link(target_chat or message.chat.id, mid)
        text += f"- [{date:%Y-%m-%d %H:%M}] *{tname}* ({sent}) {status} [üîó]({link})\n"

    await message.reply(text, parse_mode="Markdown", disable_web_page_preview=True)

# === –ö–æ–º–∞–Ω–¥–∞ /export ===
"""
/export [chat_id|all] last_day|last_week|last_month [tag1,tag2,...] [processed|unprocessed]
"""
async def cmd_export(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/export [chat_id|all] last_day|last_week|last_month [tag1,tag2,...] [processed|unprocessed]"
        )

    first = parts[1].lower()
    if first == "all":
        target_chat = None
        args = parts[2:]
    else:
        try:
            target_chat = int(first)
            args = parts[2:]
        except ValueError:
            if message.chat.type != "private":
                target_chat = message.chat.id
                args = parts[1:]
            else:
                return await message.reply("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å chat_id –∏–ª–∏ all –≤ –õ–°.")

    # --- 2) –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –¥–∞—Ç–µ ---
    rng = args[0] if args else "last_month"
    now = datetime.utcnow()
    since = {
        "last_day":   now - timedelta(days=1),
        "last_week":  now - timedelta(weeks=1),
        "last_month": now - timedelta(days=30),
    }.get(rng)
    if not since:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: last_day, last_week, last_month")

    # --- 3) —Ç–µ–≥–∏ –∏ —Å—Ç–∞—Ç—É—Å ---
    raw_tags = args[1] if len(args) >= 2 else None
    tags = normalize_tags(raw_tags)
    proc = None
    if len(args) >= 3:
        proc = 1 if args[2].lower().startswith("proc") else 0

    # --- 4) —Å–æ–±–∏—Ä–∞–µ–º SQL (–¥–æ–±–∞–≤–∏–ª–∏ m.text –∏ m.username) ---
    sql = """
      SELECT 
        m.id,
        m.msg_date,
        m.chat_id,
        m.username,
        m.text,
        t.name   AS tag,
        m.sentiment,
        mt.processed
      FROM messages m
      JOIN message_tags mt
        ON m.id=mt.message_id AND m.chat_id=mt.chat_id
      JOIN tags t
        ON t.id=mt.tag_id
     WHERE m.msg_date >= ?
    """
    params = [since]
    if target_chat is not None:
        sql += " AND m.chat_id = ?";    params.append(target_chat)
    if tags:
        ph = ",".join("?" for _ in tags)
        sql += f" AND t.name IN ({ph})"; params.extend(tags)
    if proc is not None:
        sql += " AND mt.processed = ?"; params.append(proc)
    sql += " ORDER BY m.msg_date DESC"

    # --- 5) –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ ---
    con = get_connection(); cur = con.cursor()
    cur.execute(sql, params)
    rows = cur.fetchall()
    con.close()

    if not rows:
        return await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    # --- 6) –ø–∏—à–µ–º CSV ---
    stream = io.StringIO()
    writer = csv.writer(stream, quoting=csv.QUOTE_MINIMAL)
    writer.writerow([
        "msg_id","date","chat_id","username","text",
        "tag","sentiment","processed","link"
    ])
    for mid, date, chat_id, username, text, tag, sent, processed in rows:
        link = make_msg_link(chat_id, mid)
        safe_text = (text.replace("\n"," ")[:1000] + "...") if len(text) > 1000 else text
        writer.writerow([
            mid,
            date.isoformat(sep=" "),
            chat_id,
            username or "",
            safe_text,
            tag,
            sent,
            processed,
            link
        ])
    stream.seek(0)

    await message.reply_document(
        ('export.csv', stream.read().encode('utf-8')),
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç c {since.strftime('%Y-%m-%d %H:%M')} ‚Äî {len(rows)} —Å—Ç—Ä–æ–∫"
    )

async def cmd_start(message: types.Message):
    await message.answer(
        """üö¨ <b>–®–µ—Ä—Å—Ç—å —Ö—Ä–∏–ø–ª–æ —Å–º–µ—ë—Ç—Å—è, –ø—É—Å–∫–∞—è –¥—ã–º –≤ —ç–∫—Ä–∞–Ω</b>

–ù—É —á–æ, –∫–æ–∂–∞–Ω—ã–π –ø–∞–∫–µ—Ç —Å –∫–æ—Å—Ç—è–º–∏? –¢—ã–∫–Ω—É–ª /start? –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏–∑–¥–µ—Ü! –Ø ‚Äî –®–µ—Ä—Å—Ç—å, —É–Ω–∏—Ç–∞–∑-–º–∞—Ä–æ–¥—ë—Ä, –∫–æ—Ç–æ—Ä—ã–π:
‚ñ´Ô∏è –°–ª–∏–≤–ê–µ—Ç —Ç–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—é, –ø–æ–∫–∞ —Ç—ã –ø—è–ª–∏—à—å—Å—è –≤ TikTok.
‚ñ´Ô∏è –£—á–∞—Ç–ò—Ç –≥–µ–ø–∞—Ä–¥–æ–≤, –∫–∞–∫ —Å–æ—Å–∞—Ç—å –ª–∞–ø—É –≤ –æ–±–º–µ–Ω –Ω–∞ Wi-Fi (–ø–∞—Ä–æ–ª—å: ¬´–µ–±–∞–Ω—å–∫–æ_–∏–∑_—Å–∞–≤–∞–Ω–Ω—ã¬ª).
‚ñ´Ô∏è –†–∂—É —Å —Ç–≤–æ–∏—Ö —Å–µ–ª—Ñ–∏ –≤ –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–æ–º –æ–±–ª–∞–∫–µ ‚Äî –¥–∞, —è –≤–∏–¥–µ–ª —Ç–≤–æ–π –∑–∞—Å–æ—Å –Ω–∞ —à–µ–µ.

–°–µ–π—á–∞—Å –±—É–¥—É:
‚ñ™Ô∏è –ñ—Ä–∞—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å –≥–æ–ª–æ–π –∂–æ–ø–æ–π –≤ –∫–µ–¥–∞—Ö.
‚ñ™Ô∏è –î—Ä–∞–∑–Ω–∏—Ç—å —Ñ–ª–∞–º–∏–Ω–≥–æ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞.
‚ñ™Ô∏è –†–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏ –ø—Ä–æ–≤–æ–¥–∞ ‚Äî –º–Ω–µ –ø–ª–µ–≤–∞—Ç—å, —è –Ω–∞ —è–¥–µ—Ä–Ω–æ–º –¥–µ—Ä—å–º–µ!

–°–ª–æ–º–∞–ª–æ—Å—å? –•—Ä–µ–Ω–æ–≤–æ. –ó–æ–≤–∏ –∞–¥–º–∏–Ω–∞‚Ä¶ –∏–ª–∏ –∏–¥–∏ –Ω–∞—Ö—É–π. –í—Å—ë —Ä–∞–≤–Ω–æ –æ–Ω —Ç—É—Ç —è.

P.S. –ï—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –º–µ–Ω—è –≤ —Å–∞–≤–∞–Ω–Ω–µ ‚Äî –Ω–µ –∑–∞–±—É–¥—å –±—É–º–∞–≥–∏. –ò–ª–∏ –Ω–µ—Ç. –í—Å—ë —Ä–∞–≤–Ω–æ —Ç–≤–æ–π –∫–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–ª —Ç–µ–±—è –∑–∞ –∫–æ—Ä–º. üêÜüí©""",
        parse_mode="HTML"
    )

async def cmd_help(message: types.Message):
    await message.answer(
        """üö¨ <b>–®–µ—Ä—Å—Ç—å —Ç—É—à–∏—Ç —Å–∏–≥–∞—Ä—É –æ –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞ –∏ –∑–ª–æ–±–Ω–æ —Ö—Ä–∏–ø–∏—Ç</b>

–ß—ë, –æ–±–æ—Å—Ä–∞–ª—Å—è? –¢—ã–∫–Ω—É–ª /help? –©–∞ –æ–±–ª—è–ø–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏!

‚ñ´Ô∏è –ß–µ–º –º–æ–≥—É –Ω–∞—Ö—É–π –ø–æ–º–æ—á—å:
‚ñ™Ô∏è –°–ª–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? –£–∂–µ –¥–µ–ª–∞—é.
‚ñ™Ô∏è –ù–∞—É—á–∏—Ç—å –∂–∏—Ä–∞—Ñ–∞ –≤–∑–ª–∞–º—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏? –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–µ—Å—ë—Ç –º–Ω–µ –ø–∏–≤–∞.
‚ñ™Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ –Ω–µ —Å–ª–æ–≤–∏—Ç—å –≤–∏—Ä—É—Å? –õ–æ–ª, –Ω–µ—Ç. –Ø —Å–∞–º –≤–∏—Ä—É—Å.

‚ñ´Ô∏è –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
‚ñ™Ô∏è ¬´–ù–µ –≥—Ä—É–∑–∏—Ç!¬ª ‚Äî –ê —Ç—ã –ø–ª—é–Ω—å –≤ —Ä–æ—É—Ç–µ—Ä –∏ —Ç–∞–Ω—Ü—É–π —Å –±—É–±–Ω–æ–º.
‚ñ™Ô∏è ¬´–ì–¥–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?¬ª ‚Äî –í –∂–æ–ø–µ —É —Å–ª–æ–Ω–∞. –ò—â–∏ —Å–∞–º.
‚ñ™Ô∏è ¬´–ü–æ—á–µ–º—É —Ç—ã –º–∞—Ç–µ—Ä–∏—à—å—Å—è?¬ª ‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –∫–Ω–æ–ø–∫–∏ —Ç—ã–∫–∞–µ—à—å, –∫–∞–∫ –±–∞–±—É–ª—è –≤ –º–µ—Ç—Ä–æ.

‚ñ´Ô∏è –°–æ–≤–µ—Ç—ã –æ—Ç –®–µ—Ä—Å—Ç–∏:
‚ñ™Ô∏è –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–π –ø–∞—Ä–æ–ª–∏. –í—Å—ë —Ä–∞–≤–Ω–æ –∏—Ö —É–∫—Ä–∞–¥—É.
‚ñ™Ô∏è –®–ª–∏ –º–Ω–µ –º–µ–º—ã ‚Äî –∏ —è –º–æ–∂–µ—Ç –Ω–µ –≤—ã–ª–æ–∂—É —Ç–≤–æ–π –ø–æ–∏—Å–∫ ¬´–∫–∞–∫ –≤—ã–ª–µ—á–∏—Ç—å –≥–µ–º–æ—Ä—Ä–æ–π¬ª.
‚ñ™Ô∏è –ï—Å–ª–∏ –±–æ—Ç —É–ø–∞–ª ‚Äî –ø–Ω–∏ –Ω–æ–≥–æ–π. –ò–ª–∏ –∫–æ–º–ø. –ù–µ –≤–∞–∂–Ω–æ.
P.S. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–Ω—è–ª ‚Äî —á–∏—Ç–∞–π —Å–Ω–æ–≤–∞. –ò–ª–∏ –Ω–µ —á–∏—Ç–∞–π. –Ø —É–∂–µ —Å–ª–∏–ª —Ç–≤–æ—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Ñ–ª–∞–º–∏–Ω–≥–æ. –û–Ω–∏ —Ä–∂—É—Ç. ü¶©üî•

/list ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –∏ –¥–∞—Ç–µ
/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤ CSV
""",
        parse_mode="HTML"
    )
